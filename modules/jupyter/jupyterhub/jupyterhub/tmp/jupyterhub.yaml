---
# Source: jupyterhub/templates/hub/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: hub-secret
  labels:
    component: hub
    app: jupyterhub
    release: RELEASE-NAME
    chart: jupyterhub-0.8.2
    heritage: Helm
type: Opaque
data:
  proxy.token: "MTQzYTk2NDE5OTk2NmYzNzFkZGZmZDg5MDg5NDlhMjdhZTUwYWMxY2ZiYzM0MDE2NGFmMTljYjMwMDFiYzRjYQ=="
  hub.cookie-secret: "YzczNzQ0MGIyN2E5ZDQ3NzE1ZTcwOGEyZTA4MDc0MGFkYWEyMzlhOTBjM2IyYjYwNjk1OTJjOTM0Zjc1NzBjMQ=="
  values.yaml: "YXV0aDoge30KaHViOgogIHNlcnZpY2VzOiB7fQ=="
---
# Source: jupyterhub/templates/hub/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: hub-config
  labels:
    component: hub
    app: jupyterhub
    release: RELEASE-NAME
    chart: jupyterhub-0.8.2
    heritage: Helm
data:
  values.yaml: |
    Chart:
      Name: jupyterhub
      Version: 0.8.2
    Release:
      Name: RELEASE-NAME
      Namespace: ${var.namespace}
      Service: Helm
    auth:
      admin:
        access: true
        users: null
      dummy:
        password: null
      ldap:
        dn:
          search: {}
          user: {}
        user: {}
      state:
        enabled: false
      type: dummy
      whitelist:
        users: null
    cull:
      concurrency: 10
      enabled: true
      every: 600
      maxAge: 0
      timeout: 3600
      users: false
    custom: {}
    debug:
      enabled: false
    hub:
      activeServerLimit: null
      allowNamedServers: false
      annotations: {}
      baseUrl: /
      concurrentSpawnLimit: 64
      consecutiveFailureLimit: 5
      db:
        password: null
        pvc:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          selector: {}
          storage: 1Gi
          storageClassName: null
          subPath: null
        type: sqlite
        upgrade: null
        url: null
      deploymentStrategy:
        rollingUpdate: null
        type: Recreate
      extraConfig: {}
      extraContainers: []
      extraVolumeMounts: []
      extraVolumes: []
      fsGid: 1000
      image:
        name: jupyterhub/k8s-hub
        tag: 0.8.2
      imagePullPolicy: IfNotPresent
      imagePullSecret:
        email: null
        enabled: false
        password: null
        registry: null
        username: null
      labels: {}
      networkPolicy:
        egress:
        - to:
          - ipBlock:
              cidr: 0.0.0.0/0
        enabled: false
      nodeSelector: {}
      pdb:
        enabled: true
        minAvailable: 1
      publicURL: null
      resources:
        requests:
          cpu: 200m
          memory: 512Mi
      service:
        annotations: {}
        loadBalancerIP: null
        ports:
          nodePort: null
        type: ClusterIP
      services: {}
      uid: 1000
    scheduling:
      corePods:
        nodeAffinity:
          matchNodePurpose: prefer
      podPriority:
        defaultPriority: 0
        enabled: false
        globalDefault: false
        userPlaceholderPriority: -10
      userPlaceholder:
        enabled: false
        replicas: 0
      userPods:
        nodeAffinity:
          matchNodePurpose: prefer
      userScheduler:
        enabled: false
        image:
          name: gcr.io/google_containers/kube-scheduler-amd64
          tag: v1.11.2
        logLevel: 4
        nodeSelector: {}
        pdb:
          enabled: true
          minAvailable: 1
        replicas: 1
        resources:
          requests:
            cpu: 50m
            memory: 256Mi
    singleuser:
      cloudMetadata:
        enabled: false
        ip: 169.254.169.254
      cmd: jupyterhub-singleuser
      cpu:
        guarantee: null
        limit: null
      defaultUrl: /lab
      events: true
      extraAnnotations: {}
      extraContainers: []
      extraEnv: {}
      extraLabels:
        hub.jupyter.org/network-access-hub: "true"
      extraNodeAffinity:
        preferred: []
        required: []
      extraPodAffinity:
        preferred: []
        required: []
      extraPodAntiAffinity:
        preferred: []
        required: []
      extraResource:
        guarantees: {}
        limits: {}
      extraTolerations: []
      fsGid: 100
      image:
        name: ${var.singleuser_image_name}
        pullPolicy: IfNotPresent
        tag: ${var.singleuser_image_tag}
      imagePullSecret:
        email: null
        enabled: false
        registry: null
        username: null
      initContainers: []
      lifecycleHooks: null
      memory:
        guarantee: 1G
        limit: null
      networkPolicy:
        egress:
        - to:
          - ipBlock:
              cidr: 0.0.0.0/0
              except:
              - 169.254.169.254/32
        enabled: false
      networkTools:
        image:
          name: jupyterhub/k8s-network-tools
          tag: 0.8.2
      nodeSelector: {}
      profileList: ${jsonencode(var.singleuser_profile_list)}
      serviceAccountName: null
      startTimeout: 300
      storage:
        capacity: 10Gi
        dynamic:
          pvcNameTemplate: claim-{username}{servername}
          storageAccessModes:
          - ReadWriteOnce
          storageClass: null
          volumeNameTemplate: volume-{username}{servername}
        extraLabels: {}
        extraVolumeMounts: []
        extraVolumes: []
        homeMountPath: /home/jovyan
        static:
          pvcName: ${var.singleuser_storage_static_pvcName}
          subPath: '{username}'
        type: static
      uid: 1000
---
# Source: jupyterhub/templates/hub/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: RELEASE-NAME
    chart: jupyterhub-0.8.2
    heritage: Helm
---
# Source: jupyterhub/templates/hub/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: RELEASE-NAME
    chart: jupyterhub-0.8.2
    heritage: Helm
rules:
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["pods", "persistentvolumeclaims"]
    verbs: ["get", "watch", "list", "create", "delete"]
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["events"]
    verbs: ["get", "watch", "list"]
---
# Source: jupyterhub/templates/hub/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: RELEASE-NAME
    chart: jupyterhub-0.8.2
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: hub
    namespace: ${var.namespace}
roleRef:
  kind: Role
  name: hub
  apiGroup: rbac.authorization.k8s.io
---
# Source: jupyterhub/templates/hub/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: RELEASE-NAME
    chart: jupyterhub-0.8.2
    heritage: Helm
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /hub/metrics
spec:
  type: ClusterIP
  selector:
    component: hub
    app: jupyterhub
    release: RELEASE-NAME
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
---
# Source: jupyterhub/templates/proxy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-public
  labels:
    component: proxy-public
    app: jupyterhub
    release: RELEASE-NAME
    chart: jupyterhub-0.8.2
    heritage: Helm
spec:
  selector:
    # TODO: Refactor to utilize the helpers
    component: proxy
    release: RELEASE-NAME
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8000
      # allow proxy.service.nodePort for http
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
  type: LoadBalancer
---
# Source: jupyterhub/templates/proxy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-api
  labels:
    component: proxy-api
    app: jupyterhub
    release: RELEASE-NAME
    chart: jupyterhub-0.8.2
    heritage: Helm
spec:
  selector:
    component: proxy
    app: jupyterhub
    release: RELEASE-NAME
  ports:
    - protocol: TCP
      port: 8001
      targetPort: 8001
---
# Source: jupyterhub/templates/hub/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: RELEASE-NAME
    chart: jupyterhub-0.8.2
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: hub
      app: jupyterhub
      release: RELEASE-NAME
  strategy:
    rollingUpdate: null
    type: Recreate
  template:
    metadata:
      labels:
        component: hub
        app: jupyterhub
        release: RELEASE-NAME
        hub.jupyter.org/network-access-proxy-api: "true"
        hub.jupyter.org/network-access-proxy-http: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        # This lets us autorestart when the secret changes!
        checksum/config-map: c7420881c123dc766850df7e395073f2f17f8b05c40cb1fdbeb20d4a0ab207d3
        checksum/secret: 9eb2d1e496665da31814d5b8f79a07439aff72987ca82a1efe5ef0fd12642946
    spec:
      nodeSelector: {}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: config
          configMap:
            name: hub-config
        - name: secret
          secret:
            secretName: hub-secret
      serviceAccountName: hub
      securityContext:
        runAsUser: 1000
        fsGroup: 1000  
      containers:
        - name: hub
          image: jupyterhub/k8s-hub:0.8.2
          command:
            - jupyterhub
            - --config
            - /srv/jupyterhub_config.py
          volumeMounts:
            - mountPath: /etc/jupyterhub/config/
              name: config
            - mountPath: /etc/jupyterhub/secret/
              name: secret
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
          imagePullPolicy: IfNotPresent
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: HELM_RELEASE_NAME
              value: "RELEASE-NAME"
            - name: JPY_COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  name: hub-secret
                  key: hub.cookie-secret
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hub-secret
                  key: proxy.token
          ports:
            - containerPort: 8081
              name: hub
---
# Source: jupyterhub/templates/proxy/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy
  labels:
    component: proxy
    app: jupyterhub
    release: RELEASE-NAME
    chart: jupyterhub-0.8.2
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: proxy
      app: jupyterhub
      release: RELEASE-NAME
  template:
    metadata:
      labels:
        component: proxy
        app: jupyterhub
        release: RELEASE-NAME
        hub.jupyter.org/network-access-hub: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        # This lets us autorestart when the secret changes!
        checksum/hub-secret: ac2c06c75cb0a0e7055168f5490674fdf9ab151e3832b95cbaf9e1aedce58a3e
        checksum/proxy-secret: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      terminationGracePeriodSeconds: 60
      nodeSelector: {}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      containers:
        - name: chp
          image: jupyterhub/configurable-http-proxy:3.0.0
          command:
            - configurable-http-proxy
            - --ip=0.0.0.0
            - --api-ip=0.0.0.0
            - --api-port=8001
            - --default-target=http://$(HUB_SERVICE_HOST):$(HUB_SERVICE_PORT)
            - --error-target=http://$(HUB_SERVICE_HOST):$(HUB_SERVICE_PORT)/hub/error
            - --port=8000
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
          env:
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hub-secret
                  key: proxy.token
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
              name: proxy-public
            - containerPort: 8001
              name: api
---
# Source: jupyterhub/templates/hub/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: RELEASE-NAME
    chart: jupyterhub-0.8.2
    heritage: Helm
spec:
  minAvailable: 1
  selector:
    matchLabels:
      component: hub
      app: jupyterhub
      release: RELEASE-NAME
---
# Source: jupyterhub/templates/proxy/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: proxy
  labels:
    component: proxy
    app: jupyterhub
    release: RELEASE-NAME
    chart: jupyterhub-0.8.2
    heritage: Helm
spec:
  minAvailable: 1
  selector:
    matchLabels:
      component: proxy
      app: jupyterhub
      release: RELEASE-NAME
---
# Source: jupyterhub/templates/scheduling/user-scheduler/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: RELEASE-NAME
    chart: jupyterhub-0.8.2
    heritage: Helm
spec:
  minAvailable: 1
  selector:
    matchLabels:
      component: user-scheduler
      app: jupyterhub
      release: RELEASE-NAME
